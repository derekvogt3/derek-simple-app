--- FILE: ./README.md ---

```md
```markdown
# My Fullstack App

This is a full-stack web application with a React and TypeScript front end, and a Python and Flask back end connected to a SQLite database.

## Project Structure

- `client/`: Contains the React + TypeScript front-end application.
- `server/`: Contains the Python + Flask back-end application.

## Getting Started Locally

### Prerequisites

- [Node.js](https://nodejs.org/) (which includes npm)
- [Python 3](https://www.python.org/downloads/)
- [pip](https://pip.pypa.io/en/stable/installation/)

### 1. Clone the repository

```bash
git clone <your-repository-url>
cd my-fullstack-app
```

### 2. Set up the Backend

Navigate to the `server` directory and set up a virtual environment.

```bash
cd server
python3 -m venv venv
source venv/bin/activate
```

Install the required Python packages.

```bash
pip install -r requirements.txt
```

*(Note: You will need to create a `requirements.txt` file in the `server` directory by running `pip freeze > requirements.txt` while your virtual environment is active.)*

Run the Flask development server. This will also create the `app.db` SQLite database file on the first run.

```bash
python app.py
```

The back-end server will be running on `http://localhost:5000`.

### 3. Set up the Frontend

In a new terminal, navigate to the `client` directory.

```bash
cd ../client
```

Install the required npm packages.

```bash
npm install
```

Run the React development server.

```bash
npm run dev
```

The front-end development server will be running on `http://localhost:5173`. You can now view the application in your browser at this address.
```
```

--- FILE: ./server/app.py ---

```python
import os
from flask import Flask, request, jsonify
from flask_cors import CORS
from serpapi import GoogleSearch
from openai import OpenAI
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

# Initialize the Flask app
app = Flask(__name__)
CORS(app)

# Initialize API clients
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
serpapi_api_key = os.getenv("SERPAPI_API_KEY")

# --- API Endpoint to handle queries ---
@app.route('/api/query', methods=['POST'])
def handle_query():
    # Get the user's query from the request body
    data = request.get_json()
    query = data.get('query')

    if not query:
        return jsonify({"error": "Query is required"}), 400
    if not serpapi_api_key or not client.api_key:
        return jsonify({"error": "API keys are not configured correctly"}), 500

    try:
        # --- 1. Fetch search results using SerpAPI ---
        print(f"Fetching search results for: {query}")
        search = GoogleSearch({
            "q": query,
            "api_key": serpapi_api_key
        })
        search_results = search.get_dict()
        organic_results = search_results.get("organic_results", [])

        # Extract relevant context for the AI
        context = ""
        for i, result in enumerate(organic_results[:5]): # Use top 5 results
            context += f"[{i+1}] {result.get('snippet', 'No snippet available.')}\n"
        
        print(f"Context for AI:\n{context}")

        # --- 2. Generate AI response using OpenAI ---
        print("Generating AI response...")
        prompt = f"""
        Based on the following search results, provide a comprehensive answer to the user's query: "{query}"

        Search Results (with sources):
        {context}

        Instructions:
        - Synthesize the information from the search results into a clear, well-written answer.
        - Your answer MUST include citations in the format [1], [2], etc., corresponding to the search results provided.
        - If the search results do not provide enough information, state that you couldn't find a definitive answer.
        - Do not invent information. Base your answer strictly on the provided text.
        """

        completion = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "You are a helpful AI assistant that answers questions based on provided search results."},
                {"role": "user", "content": prompt}
            ]
        )
        ai_response = completion.choices[0].message.content
        print(f"AI Response: {ai_response}")

        # --- 3. Combine and return the results ---
        response_data = {
            "aiResponse": ai_response,
            "searchResults": organic_results
        }
        return jsonify(response_data)

    except Exception as e:
        print(f"An error occurred: {e}")
        return jsonify({"error": str(e)}), 500

# Run the app on port 5001 as we established
if __name__ == '__main__':
    app.run(debug=True, port=5001)
```

--- FILE: ./client/README.md ---

```md
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

```

--- FILE: ./client/tsconfig.json ---

```json
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}

```

--- FILE: ./client/public/index.html ---

```html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

```

--- FILE: ./client/public/manifest.json ---

```json
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

```

--- FILE: ./client/src/index.tsx ---

```typescript
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(
  document.getElementById('root') as HTMLElement
);
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

```

--- FILE: ./client/src/App.tsx ---

```typescript
import React, { useState, FormEvent } from 'react';
import './App.css';
import { HomeIcon, DiscoverIcon, SpacesIcon, SignInIcon, SearchIcon } from './icons';

// --- Type Definitions ---
interface SearchResult {
  position: number;
  title: string;
  link: string;
  snippet: string;
}

interface ApiResponse {
  aiResponse: string;
  searchResults: SearchResult[];
}

type FocusMode = 'general' | 'health' | 'local' | 'sports' | 'finance';

const focusData = {
  health: {
    title: "What do you want to know?",
    suggestions: [
      "What lifestyle changes can improve metabolic health?",
      "What are physical therapy exercises to reduce hip pain?",
      "What are some strategies for managing stress?",
    ],
  },
  local: {
    title: "What's going on in your area?",
    suggestions: [
      "What is happening in my city this weekend?",
      "What are the top-rated restaurants in my city?",
      "What are concerts in my city next month?",
    ],
  },
  sports: {
    title: "What's the latest in sports?",
    suggestions: [
      "Recap of last night's championship game",
      "Who are the rising stars in international football?",
      "What are the major rule changes in baseball this year?",
    ],
  },
  finance: {
    title: "How's the market looking?",
    suggestions: [
      "What are the predictions for the stock market next quarter?",
      "Explain the concept of compound interest with examples",
      "What are the pros and cons of investing in index funds?",
    ],
  },
};

// --- Main App Component ---
function App() {
  const [query, setQuery] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [results, setResults] = useState<ApiResponse | null>(null);
  const [focusMode, setFocusMode] = useState<FocusMode>('general');

  const handleSubmit = async (event: FormEvent) => {
    event.preventDefault();
    if (!query.trim()) return;
    performSearch(query);
  };

  const handleSuggestionClick = (suggestion: string) => {
    setQuery(suggestion);
    performSearch(suggestion);
  }

  const handleFocusToggle = (mode: FocusMode) => {
    // If clicking the currently active mode, toggle back to general
    if (focusMode === mode) {
      setFocusMode('general');
    } else {
      setFocusMode(mode);
    }
  };

  const performSearch = async (currentQuery: string) => {
    setIsLoading(true);
    setError(null);
    setResults(null);

    try {
      const response = await fetch('/api/query', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ query: currentQuery }),
      });
      if (!response.ok) throw new Error(`Error: ${response.status} ${response.statusText}`);
      const data: ApiResponse = await response.json();
      setResults(data);
    } catch (err: any) {
      setError(err.message || "An unexpected error occurred.");
    } finally {
      setIsLoading(false);
    }
  };
  
  // --- Render Functions ---
  const renderSidebar = () => (
    <aside className="sidebar">
      <div className="sidebar-logo">Perplexity</div>
      <ul className="nav-list">
        <li className="nav-item active"><HomeIcon /> Home</li>
        <li className="nav-item"><DiscoverIcon /> Discover</li>
        <li className="nav-item"><SpacesIcon /> Spaces</li>
      </ul>
      <div className="nav-item"><SignInIcon /> Sign In</div>
    </aside>
  );

  const renderMainContent = () => (
    <main className="main-content">
      <div className="container">
        {!results && !isLoading && !error && (
            <>
              {focusMode === 'general' ? (
                <h1 className="logo-heading">perplexity</h1>
              ) : (
                <h1 className="prompt-heading">{focusData[focusMode as Exclude<FocusMode, 'general'>].title}</h1>
              )}
              
              <div className="search-form-container">
                <form onSubmit={handleSubmit} className="search-input-area">
                  <input
                    type="text"
                    value={query}
                    onChange={(e) => setQuery(e.target.value)}
                    className="search-input"
                    placeholder="Ask anything..."
                    disabled={isLoading}
                  />
                  <button type="submit" className="search-button" disabled={isLoading}>&rarr;</button>
                </form>

                {focusMode !== 'general' && (
                  <ul className="prompt-suggestions-list">
                    {focusData[focusMode as Exclude<FocusMode, 'general'>].suggestions.map(prompt => (
                      <li key={prompt} className="prompt-suggestion-item" onClick={() => handleSuggestionClick(prompt)}>
                        <SearchIcon />
                        <span>{prompt}</span>
                      </li>
                    ))}
                  </ul>
                )}
              </div>

              <div className="focus-buttons">
                <button className={`focus-btn ${focusMode === 'health' ? 'active' : ''}`} onClick={() => handleFocusToggle('health')}>Health</button>
                <button className={`focus-btn ${focusMode === 'local' ? 'active' : ''}`} onClick={() => handleFocusToggle('local')}>Local</button>
                <button className={`focus-btn ${focusMode === 'sports' ? 'active' : ''}`} onClick={() => handleFocusToggle('sports')}>Sports</button>
                <button className={`focus-btn ${focusMode === 'finance' ? 'active' : ''}`} onClick={() => handleFocusToggle('finance')}>Finance</button>
              </div>
            </>
        )}

        {isLoading && <div className="loading">Thinking...</div>}
        {error && <div className="error">{error}</div>}

        {results && (
          <div className="results-container">
            <div className="ai-response-card"><p>{results.aiResponse}</p></div>
            <div className="search-results-list">
              <h3>Sources</h3>
              {results.searchResults.map((item) => (
                <div key={item.position} className="search-result-item">
                  <a href={item.link} target="_blank" rel="noopener noreferrer">{item.title}</a>
                  <p>{item.snippet}</p>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </main>
  );

  return (
    <div className="app-layout">
      {renderSidebar()}
      {renderMainContent()}
    </div>
  );
}

export default App;
```

--- FILE: ./client/src/App.test.tsx ---

```typescript
import React from 'react';
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

```

--- FILE: ./client/src/App.css ---

```css
/* --- Main Layout --- */
.app-layout {
  display: flex;
  min-height: 100vh;
}

.sidebar {
  width: 240px;
  background-color: var(--sidebar-bg);
  border-right: 1px solid var(--border-color);
  padding: 1.5rem 1rem;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  flex-shrink: 0;
}

.main-content {
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 2rem;
}

/* --- Sidebar Styles --- */
.sidebar-logo {
  font-size: 1.5rem;
  font-weight: bold;
  margin-bottom: 2.5rem;
}

.nav-list {
  list-style: none;
  padding: 0;
  margin: 0;
  flex-grow: 1;
}

.nav-item {
  display: flex;
  align-items: center;
  padding: 0.8rem 1rem;
  margin-bottom: 0.5rem;
  border-radius: 8px;
  cursor: pointer;
  color: var(--text-secondary);
  transition: background-color 0.2s, color 0.2s;
}

.nav-item:hover {
  background-color: var(--search-bg);
  color: var(--text-primary);
}

.nav-item.active {
  background-color: var(--search-bg);
  color: var(--text-primary);
}

.nav-item svg {
  margin-right: 1rem;
}

/* --- Main Content & Search --- */
.container {
  width: 100%;
  max-width: 800px;
}

/* Restored logo and new heading styles */
.logo-heading {
  font-family: 'Helvetica Neue', sans-serif;
  font-size: 3.5rem;
  font-weight: 500;
  text-align: center;
  margin-bottom: 2.5rem;
  color: var(--text-primary);
}

.prompt-heading {
  font-size: 2.5rem;
  font-weight: 500;
  text-align: center;
  margin-bottom: 2.5rem;
  color: var(--text-primary);
}


.search-form-container {
  background-color: var(--search-bg);
  border: 1px solid var(--border-color);
  border-radius: 16px;
  padding: 1rem 1rem 1.5rem 1.5rem;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
}

.search-input-area {
  display: flex;
  align-items: center;
}

.search-input {
  flex-grow: 1;
  background-color: transparent;
  border: none;
  color: var(--text-primary);
  font-size: 1.2rem;
  outline: none;
  box-sizing: border-box;
  padding-right: 1rem;
}

.search-input::placeholder {
  color: var(--text-secondary);
}

.search-button {
  background: var(--accent-color);
  border: none;
  border-radius: 8px;
  width: 3rem;
  height: 2.5rem;
  color: white;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1.5rem;
  transition: background-color 0.2s;
  flex-shrink: 0;
}

.search-button:hover {
  background-color: var(--accent-hover);
}

.search-button:disabled {
  background-color: #555;
  cursor: not-allowed;
}

/* --- Focus Buttons (Health, Local, etc.) --- */
.focus-buttons {
  display: flex;
  justify-content: center;
  gap: 0.8rem;
  margin-top: 2rem;
  flex-wrap: wrap;
}

.focus-btn {
  background-color: transparent;
  border: 1px solid var(--border-color);
  color: var(--text-secondary);
  padding: 0.5rem 1rem;
  border-radius: 1rem;
  cursor: pointer;
  font-size: 0.9rem;
  transition: border-color 0.2s, color 0.2s, background-color 0.2s;
}

.focus-btn:hover {
  border-color: var(--text-primary);
  color: var(--text-primary);
}

.focus-btn.active {
  background-color: var(--search-bg);
  border-color: var(--accent-color);
  color: var(--accent-color);
}

/* --- Suggestion Prompts --- */
.prompt-suggestions-list {
  list-style: none;
  padding: 0;
  margin: 1.5rem 0 0 0;
  border-top: 1px solid var(--border-color);
}

.prompt-suggestion-item {
  display: flex;
  align-items: center;
  color: var(--text-secondary);
  padding: 0.8rem 0;
  cursor: pointer;
  transition: color 0.2s;
}

.prompt-suggestion-item:hover {
  color: var(--text-primary);
}

.prompt-suggestion-item svg {
  margin-right: 1rem;
  width: 18px;
  height: 18px;
}


/* --- Results --- */
.results-container {
  width: 100%;
  margin-top: 3rem;
}

.ai-response-card {
  background-color: var(--search-bg);
  border: 1px solid var(--border-color);
  border-radius: 8px;
  padding: 1.5rem;
  margin-bottom: 2rem;
  white-space: pre-wrap;
  line-height: 1.6;
}

.search-results-list h3 {
  margin-bottom: 1rem;
  font-weight: 500;
  color: var(--text-secondary);
}

.search-result-item {
  border-top: 1px solid var(--border-color);
  padding: 1.5rem 0;
}

.search-result-item:first-child {
  border-top: none;
}

.search-result-item a {
  text-decoration: none;
  color: var(--accent-color);
  font-size: 1.1rem;
}
.search-result-item a:hover {
  text-decoration: underline;
}

.search-result-item p {
  margin: 0.5rem 0 0;
  color: var(--text-secondary);
}

.loading, .error {
  text-align: center;
  font-size: 1.2rem;
  margin-top: 2rem;
  color: var(--text-secondary);
}
```

--- FILE: ./client/src/index.css ---

```css
:root {
  --background-dark: #151515;
  --sidebar-bg: #1C1C1C;
  --search-bg: #222222;
  --border-color: #333333;
  --text-primary: #F0F2F5;
  --text-secondary: #a0a0a0;
  --accent-color: #00A699;
  --accent-hover: #00877A;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: var(--background-dark);
  color: var(--text-primary);
}
```

--- FILE: ./client/src/setupTests.ts ---

```typescript
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

```

--- FILE: ./client/src/reportWebVitals.ts ---

```typescript
import { ReportHandler } from 'web-vitals';

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

```

--- FILE: ./client/src/icons.tsx ---

```typescript
import React from 'react';

// A generic props type for our SVG icons
interface IconProps extends React.SVGProps<SVGSVGElement> {
  className?: string;
}

export const HomeIcon = ({ className, ...props }: IconProps) => (
  <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg>
);

export const DiscoverIcon = ({ className, ...props }: IconProps) => (
  <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><circle cx="12" cy="12" r="10"></circle><path d="M12 2a14.5 14.5 0 0 0 0 20 14.5 14.5 0 0 0 0-20"></path><path d="M2 12h20"></path></svg>
);

export const SpacesIcon = ({ className, ...props }: IconProps) => (
  <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><line x1="3" y1="9" x2="21" y2="9"></line><line x1="9" y1="21" x2="9" y2="9"></line></svg>
);

export const SignInIcon = ({ className, ...props }: IconProps) => (
    <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M15 3h4a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2h-4"></path><polyline points="10 17 15 12 10 7"></polyline><line x1="15" y1="12" x2="3" y2="12"></line></svg>
);

export const SearchIcon = ({ className, ...props }: IconProps) => (
  <svg className={className} xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><circle cx="11" cy="11" r="8"></circle><line x1="21" y1="21" x2="16.65" y2="16.65"></line></svg>
);
```

--- FILE: ./client/src/react-app-env.d.ts ---

```typescript
/// <reference types="react-scripts" />

```

